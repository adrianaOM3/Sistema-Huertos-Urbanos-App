// <auto-generated />
using System;
using Api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(UrbanGardeningContext))]
    [Migration("20250620064102_NuevaMigracionLimpia")]
    partial class NuevaMigracionLimpia
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Api.Models.Calendar", b =>
                {
                    b.Property<int>("CalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("calendarId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalendarId"));

                    b.Property<DateTime?>("CalendarDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("calendarDate");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("CalendarId")
                        .HasName("PK__Calendar__EE5496F63661BE91");

                    b.ToTable("Calendar", (string)null);
                });

            modelBuilder.Entity("Api.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("commentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("GardenId")
                        .HasColumnType("int")
                        .HasColumnName("gardenId");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__CDDE919D049988A8");

                    b.HasIndex("GardenId");

                    b.HasIndex(new[] { "UserId" }, "IX_Comments_userId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Api.Models.Garden", b =>
                {
                    b.Property<int>("GardenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("gardenId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GardenId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("GardenId")
                        .HasName("PK__Gardens__C5BCE574A5896009");

                    b.HasIndex(new[] { "UserId" }, "IX_Gardens_userId");

                    b.ToTable("Gardens");
                });

            modelBuilder.Entity("Api.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notificationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__4BA5CEA97C271245");

                    b.HasIndex(new[] { "UserId" }, "IX_Notifications_userId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Api.Models.Pest", b =>
                {
                    b.Property<int>("PestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PestId"));

                    b.Property<string>("CommonName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("commonName");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Host")
                        .HasColumnType("text")
                        .HasColumnName("host");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("imageUrl");

                    b.Property<string>("ScientificName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("scientificName");

                    b.Property<string>("Solution")
                        .HasColumnType("text")
                        .HasColumnName("solution");

                    b.HasKey("PestId")
                        .HasName("PK__Pests__7F10C1DDE81FD7F1");

                    b.ToTable("Pests");
                });

            modelBuilder.Entity("Api.Models.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("photoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text")
                        .HasColumnName("photoUrl");

                    b.HasKey("PhotoId")
                        .HasName("PK__Photos__547C322DFF40E13E");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Api.Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("plantId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"));

                    b.Property<string>("CareLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("careLevel");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FlowerDetails")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("flowerDetails");

                    b.Property<string>("FruitDetails")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fruitDetails");

                    b.Property<string>("GrowthCycle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("growthCycle");

                    b.Property<string>("GrowthRate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("growthRate");

                    b.Property<string>("HardinessZone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("hardinessZone");

                    b.Property<string>("HardinessZoneDescription")
                        .HasColumnType("text")
                        .HasColumnName("hardinessZoneDescription");

                    b.Property<bool?>("HasLeaves")
                        .HasColumnType("bit")
                        .HasColumnName("hasLeaves");

                    b.Property<bool?>("IsEdible")
                        .HasColumnType("bit")
                        .HasColumnName("isEdible");

                    b.Property<bool?>("IsSaltTolerant")
                        .HasColumnType("bit")
                        .HasColumnName("isSaltTolerant");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("lastModified")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LeafColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("leafColor");

                    b.Property<string>("MaintenanceLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("maintenanceLevel");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("plantName");

                    b.Property<string>("ScientificName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("scientificName");

                    b.Property<string>("SunExposure")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sunExposure");

                    b.Property<string>("WateringFrequency")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("wateringFrequency");

                    b.HasKey("PlantId")
                        .HasName("PK__Plants__870532B032979DAC");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Api.Models.Publication", b =>
                {
                    b.Property<int>("PublicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("publicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationId"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("commentId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("likes");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("PublicationId")
                        .HasName("PK__Publicat__883D5CDF2EDC98F4");

                    b.HasIndex(new[] { "UserId" }, "IX_Publications_userId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("Api.Models.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reminderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<int?>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("plantId");

                    b.Property<DateOnly?>("ReminderDate")
                        .HasColumnType("date")
                        .HasColumnName("reminderDate");

                    b.Property<string>("TypeReminder")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("typeReminder");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("ReminderId")
                        .HasName("PK__Reminder__09DAAAE369C1E1AB");

                    b.HasIndex(new[] { "PlantId" }, "IX_Reminders_plantId");

                    b.HasIndex(new[] { "UserId" }, "IX_Reminders_userId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Api.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("firstName");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Surname")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("surname");

                    b.Property<string>("Telephone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telephone");

                    b.HasKey("UserId")
                        .HasName("PK__Users__CB9A1CFF12AAA002");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E616439D41849")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PlantPest", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("plantId");

                    b.Property<int>("PestId")
                        .HasColumnType("int")
                        .HasColumnName("pestId");

                    b.HasKey("PlantId", "PestId")
                        .HasName("PK__PlantPes__40F43EAD78645CA7");

                    b.HasIndex(new[] { "PestId" }, "IX_PlantPests_pestId");

                    b.ToTable("PlantPests", (string)null);
                });

            modelBuilder.Entity("Api.Models.Comment", b =>
                {
                    b.HasOne("Api.Models.Garden", "Garden")
                        .WithMany("Comments")
                        .HasForeignKey("GardenId")
                        .HasConstraintName("FK__Comments__gardenId");

                    b.HasOne("Api.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Comments__userId__693CA210");

                    b.Navigation("Garden");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Models.Garden", b =>
                {
                    b.HasOne("Api.Models.User", "User")
                        .WithMany("Gardens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Gardens__userId__534D60F1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Models.Notification", b =>
                {
                    b.HasOne("Api.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Notificat__userI__6E01572D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Models.Publication", b =>
                {
                    b.HasOne("Api.Models.User", "User")
                        .WithMany("Publications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Publicati__userI__656C112C");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Models.Reminder", b =>
                {
                    b.HasOne("Api.Models.Plant", "Plant")
                        .WithMany("Reminders")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Reminders__plant__5CD6CB2B");

                    b.HasOne("Api.Models.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Reminders__userI__5BE2A6F2");

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlantPest", b =>
                {
                    b.HasOne("Api.Models.Pest", null)
                        .WithMany()
                        .HasForeignKey("PestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__PlantPest__pestI__59063A47");

                    b.HasOne("Api.Models.Plant", null)
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__PlantPest__plant__5812160E");
                });

            modelBuilder.Entity("Api.Models.Garden", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Api.Models.Plant", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Api.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Gardens");

                    b.Navigation("Notifications");

                    b.Navigation("Publications");

                    b.Navigation("Reminders");
                });
#pragma warning restore 612, 618
        }
    }
}
